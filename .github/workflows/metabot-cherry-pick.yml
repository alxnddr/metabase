name: MetabotCherryPick

on:
  push:
    branches:
      - master

jobs:
  pr_info:
    name: Check if the commit should be cherry-picked
    runs-on: ubuntu-latest
    outputs:
      title: ${{ fromJson(steps.get_should_cherry_pick.outputs.result).title }}
      should_cherry_pick: ${{ fromJson(steps.get_should_cherry_pick.outputs.result).hasCherryPickLabel }}
    steps:
      - uses: actions/github-script@v4
        id: get_should_cherry_pick
        with:
          script: |
            const commitMessage = context.payload.commits[0].message;
            const pullRequestNumbers = Array.from(commitMessage.matchAll(/\(#(.*?)\)/g))

            if (pullRequestNumbers.length === 0) {
              return false;
            }

            if (pullRequestNumbers > 1) {
              throw "Multiple PRs are associated with this commit";
            }

            const pullRequestNumber = pullRequestNumbers[0][1];

            const { data } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequestNumber
            });

            const hasCherryPickLabel = data.labels.some((label) => label.name === 'cherry-pick');
            return {
              title: data.title,
              hasCherryPickLabel
            }

  get_latest_release_branch:
    name: Get latest release branch
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.get_branch_name.outputs.result }}
    steps:
      - uses: actions/github-script@v4
        id: get_branch_name
        with:
          result-encoding: string
          script: |
            const releaseBranches = await github.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "heads/release-x.",
            });

            const getVersionFromBranch = branch => parseInt(branch.match(/release-x\.(.*?)\.x/)[1]);
            const latestReleaseBranch = releaseBranches.data.reduce((prev, current) => getVersionFromBranch(prev.ref) > getVersionFromBranch(current.ref) ? prev : current);
            const latestReleaseBranchName = latestReleaseBranch.ref.replace(/^refs\/heads\//, "");

            console.log(`Latest release branch: ${latestReleaseBranchName}`)

            return latestReleaseBranchName;

  create_release_pull_request:
    runs-on: ubuntu-latest
    name: Create a PR with the commit
    needs: [pr_info, get_latest_release_branch]
    env:
      RELEASE_BRANCH: ${{ needs.get_latest_release_branch.outputs.branch_name }}
      ORIGINAL_PR_TITLE: ${{ needs.pr_info.outputs.title }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
      - run: |
          cat <<- EOF > $HOME/.netrc
            machine github.com
            login $GITHUB_ACTOR
            password $GITHUB_TOKEN
            machine api.github.com
            login $GITHUB_ACTOR
            password $GITHUB_TOKEN
          EOF

          chmod 600 $HOME/.netrc

          git config --global user.email "metabase-github-automation@metabase.com"
          git config --global user.name "$GITHUB_ACTOR"

          PR_BRANCH="cherry-pick-$GITHUB_SHA"

          git fetch --all
          git checkout -b "${PR_BRANCH}" origin/"${RELEASE_BRANCH}"
          git cherry-pick "${GITHUB_SHA}"
          git push -u origin "${PR_BRANCH}"

          hub pull-request -b "${RELEASE_BRANCH}" -h "${PR_BRANCH}" -l "auto-cherry-picked" -a "${GITHUB_ACTOR}" -m "\"üçí ${ORIGINAL_PR_TITLE}\""
