name: Get latest release branch
description: "Get the latest release branches based on the provided count"

inputs:
  backport_count:
    description: "Number of latest release branches to return"
    required: false
    default: "1"

outputs:
  branch-names:
    description: "JSON array of branch names"
    value: ${{ steps.get_release_branches.outputs.result }}

runs:
  using: "composite"
  steps:
    - name: Fetch and filter release branches
      id: get_release_branches
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}
        BACKPORT_COUNT: ${{ inputs.backport_count }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
      run: |
        # Fetch branches whose ref starts with "release-x."
        branches_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${OWNER}/${REPO}/git/matching-refs/heads/release-x.")

        # Extract branch names from the JSON (removing the "refs/heads/" prefix)
        branches=$(echo "$branches_json" | jq -r '.[].ref' | sed 's|refs/heads/||' | grep -E '^release-x\.[0-9]+\.x$')

        # Sort branches in descending order by the numeric part (for example, "release-x.56.x" before "release-x.55.x")
        sorted_branches=$(echo "$branches" | sort -r -t '.' -k2,2n)

        # Select the top N branches (N is BACKPORT_COUNT)
        top_branches=$(echo "$sorted_branches" | head -n "$BACKPORT_COUNT" | jq -R -s -c 'split("\n") | map(select(length > 0))')

        echo "Target branches: $top_branches"
        echo "result=$top_branches" >> "$GITHUB_OUTPUT"
